
def PatternCount(Pattern, Text):
    count = 0
    for i in range(len(Text)-len(Pattern)+1):
        if Text[i:i+len(Pattern)] == Pattern:
            count = count+1
    return count 
def FrequencyMap(Text, k):
    n = len(Text)
    freq = {}
	for i in range(n-k+1):
        Pattern = Text[i:i+k]
        if Pattern not in freq.keys():
            freq[Pattern] = 0
	    else:
            freq[Pattern]= freq[Pattern]+1
    return freq
    


def FrequencyMap(Text, k):
    # your code here
    n = len(Text)
    freq = {}
    for i in range(n-k+1):
        Pattern = Text[i:i+k]
        if Pattern not in freq.keys():
            freq[Pattern] = 1
        else:
            freq[Pattern]= freq[Pattern]+1
    return freq
    
def FrequentWords(Text, k):
    words = []
    freq = FrequencyMap(Text, k)
    m = max(freq.values())
    for key in freq.keys():
        if freq[key] == m:
            words.append(key)

        # add each key to words whose corresponding frequency value is equal to m
    return words


# Input:  A DNA string Pattern
# Output: The reverse complement of Pattern
def ReverseComplement(Pattern):
    Pattern = Reverse(Pattern) # reverse all letters in a string
    Pattern = Complement(Pattern) # complement each letter in a string
    return Pattern

def Reverse(Pattern):
    reverse = []
    reverse_string = ''
    for char in Pattern:
        reverse.insert(0,char)
    for char in reverse:
        reverse_string += char
    return reverse_string

def Complement(Pattern):
    d = {}
    d['A']='T'
    d['T']='A'
    d['C']='G'
    d['G']='C'
    
    complement_string = ''
    for i in Pattern:
        complement_string += d[i]
    return(complement_string)
